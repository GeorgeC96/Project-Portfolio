{
 "cells": [
  {
   "cell_type": "code",
   "execution_count": 5,
   "id": "94846ac2-0d3e-47af-811a-b439fb770e84",
   "metadata": {},
   "outputs": [],
   "source": [
    "import streamlit as st\n",
    "import pandas as pd\n",
    "import matplotlib.pyplot as plt\n",
    "import seaborn as sns\n",
    "from sklearn.preprocessing import StandardScaler\n",
    "from sklearn.model_selection import train_test_split\n",
    "from sklearn.linear_model import LogisticRegression\n",
    "from sklearn.ensemble import RandomForestClassifier\n",
    "from sklearn.svm import SVC\n",
    "from sklearn.metrics import accuracy_score, confusion_matrix, classification_report\n",
    "\n",
    "# File Path\n",
    "file_path = r\"C:\\Users\\georg\\Documents\\BPP\\Professional Practice\\IBM Employee Attrition.csv\"\n",
    "\n",
    "# Load and preprocess data\n",
    "df = pd.read_csv(file_path)\n",
    "df = df.drop_duplicates()\n",
    "df_encoded = pd.get_dummies(df, columns=[\n",
    "    'Attrition', 'BusinessTravel', 'Department', 'EducationField', 'Gender', 'JobRole', \n",
    "    'MaritalStatus', 'OverTime'\n",
    "])\n",
    "df_standardized = df_encoded.copy()\n",
    "numerical_columns = [\n",
    "    'Age', 'DailyRate', 'DistanceFromHome', 'Education', 'EnvironmentSatisfaction',\n",
    "    'HourlyRate', 'JobInvolvement', 'JobLevel', 'JobSatisfaction', 'MonthlyIncome',\n",
    "    'MonthlyRate', 'NumCompaniesWorked', 'PercentSalaryHike', 'PerformanceRating',\n",
    "    'RelationshipSatisfaction', 'StockOptionLevel', 'TotalWorkingYears', 'TrainingTimesLastYear',\n",
    "    'WorkLifeBalance', 'YearsAtCompany', 'YearsInCurrentRole', 'YearsSinceLastPromotion',\n",
    "    'YearsWithCurrManager'\n",
    "]\n",
    "scaler = StandardScaler()\n",
    "df_standardized[numerical_columns] = scaler.fit_transform(df_standardized[numerical_columns])\n",
    "for col in df_encoded.select_dtypes(include='bool').columns:\n",
    "    df_encoded[col] = df_encoded[col].astype(int)\n",
    "for col in df_standardized.select_dtypes(include='bool').columns:\n",
    "    df_standardized[col] = df_standardized[col].astype(int)\n",
    "\n",
    "# Define relevant variables\n",
    "relevant_vars = [\n",
    "    'Attrition_Yes', 'JobSatisfaction', 'OverTime_Yes', 'DistanceFromHome', 'MonthlyIncome', \n",
    "    'Age', 'EnvironmentSatisfaction', 'WorkLifeBalance', 'YearsAtCompany'\n",
    "]\n",
    "df_encoded_relevant = df_encoded[relevant_vars]\n",
    "df_standardized_relevant = df_standardized[relevant_vars]\n",
    "\n",
    "# Streamlit App\n",
    "st.title('IBM Employee Attrition Analysis')\n",
    "\n",
    "# Display dataset\n",
    "st.header('Dataset')\n",
    "st.write(df.head())\n",
    "\n",
    "# Correlation matrices\n",
    "st.header('Correlation Matrix (Encoded Data)')\n",
    "fig, ax = plt.subplots(figsize=(12, 10))\n",
    "sns.heatmap(df_encoded_relevant.corr().round(2), annot=True, cmap='coolwarm', annot_kws={\"size\": 8}, ax=ax)\n",
    "st.pyplot(fig)\n",
    "\n",
    "st.header('Correlation Matrix (Standardized Data)')\n",
    "fig, ax = plt.subplots(figsize=(12, 10))\n",
    "sns.heatmap(df_standardized_relevant.corr().round(2), annot=True, cmap='coolwarm', annot_kws={\"size\": 8}, ax=ax)\n",
    "st.pyplot(fig)\n",
    "\n",
    "# Plot distributions\n",
    "st.header('Distributions by Attrition')\n",
    "key_numerical_columns = [\n",
    "    'DistanceFromHome', 'JobSatisfaction', 'MonthlyIncome', 'YearsAtCompany'\n",
    "]\n",
    "for column in key_numerical_columns:\n",
    "    fig, ax = plt.subplots(figsize=(12, 6))\n",
    "    sns.histplot(df_encoded, x=column, hue='Attrition_Yes', multiple='stack', bins=30, ax=ax)\n",
    "    ax.set_title(f'Distribution of {column} by Attrition')\n",
    "    st.pyplot(fig)\n",
    "\n",
    "# Model Training and Evaluation\n",
    "st.header('Model Performance')\n",
    "features = [\n",
    "    'Age', 'DistanceFromHome', 'JobSatisfaction', 'MonthlyIncome', 'YearsAtCompany',\n",
    "    'OverTime_Yes', 'BusinessTravel_Travel_Frequently', 'BusinessTravel_Travel_Rarely'\n",
    "]\n",
    "target = 'Attrition_Yes'\n",
    "features = [col for col in features if col in df_encoded.columns]\n",
    "X = df_encoded[features]\n",
    "y = df_encoded[target]\n",
    "X_train, X_test, y_train, y_test = train_test_split(X, y, test_size=0.3, random_state=42)\n",
    "scaler = StandardScaler()\n",
    "X_train_scaled = scaler.fit_transform(X_train)\n",
    "X_test_scaled = scaler.transform(X_test)\n",
    "\n",
    "models = {\n",
    "    'Logistic Regression': LogisticRegression(random_state=42),\n",
    "    'Random Forest': RandomForestClassifier(random_state=42),\n",
    "    'Support Vector Machine': SVC(random_state=42)\n",
    "}\n",
    "\n",
    "for name, model in models.items():\n",
    "    model.fit(X_train_scaled, y_train)\n",
    "    y_pred = model.predict(X_test_scaled)\n",
    "    st.subheader(f\"{name} (Without Class Weights) Results:\")\n",
    "    st.text(f\"Accuracy: {accuracy_score(y_test, y_pred):.2f}\")\n",
    "    st.text(f\"Confusion Matrix:\\n{confusion_matrix(y_test, y_pred)}\")\n",
    "    st.text(f\"Classification Report:\\n{classification_report(y_test, y_pred)}\")\n",
    "\n",
    "# Models with class weights\n",
    "models_weighted = {\n",
    "    'Logistic Regression': LogisticRegression(class_weight='balanced', random_state=42),\n",
    "    'Random Forest': RandomForestClassifier(class_weight='balanced', random_state=42),\n",
    "    'Support Vector Machine': SVC(class_weight='balanced', random_state=42)\n",
    "}\n",
    "\n",
    "for name, model in models_weighted.items():\n",
    "    model.fit(X_train_scaled, y_train)\n",
    "    y_pred = model.predict(X_test_scaled)\n",
    "    st.subheader(f\"{name} (With Class Weights) Results:\")\n",
    "    st.text(f\"Accuracy: {accuracy_score(y_test, y_pred):.2f}\")\n",
    "    st.text(f\"Confusion Matrix:\\n{confusion_matrix(y_test, y_pred)}\")\n",
    "    st.text(f\"Classification Report:\\n{classification_report(y_test, y_pred)}\")\n"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 7,
   "id": "15132671-9823-4875-ac79-6c24fb54a60b",
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "C:\\Users\\georg\\app.py\n"
     ]
    }
   ],
   "source": [
    "import os\n",
    "print(os.path.abspath('app.py'))"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "id": "8e2db0d9-ede7-4536-b4d2-c74091ac2a58",
   "metadata": {},
   "outputs": [],
   "source": []
  }
 ],
 "metadata": {
  "kernelspec": {
   "display_name": "Python 3 (ipykernel)",
   "language": "python",
   "name": "python3"
  },
  "language_info": {
   "codemirror_mode": {
    "name": "ipython",
    "version": 3
   },
   "file_extension": ".py",
   "mimetype": "text/x-python",
   "name": "python",
   "nbconvert_exporter": "python",
   "pygments_lexer": "ipython3",
   "version": "3.12.4"
  }
 },
 "nbformat": 4,
 "nbformat_minor": 5
}
